-- ==================================================================================================
-- SUM
-- ==================================================================================================/*Devuelve la suma de todos los valores o solo de los valores DISTINCT de la expresión. SUM solo puede utilizarse con columnas numéricas. Se omiten los valores NULL.*/USE AdventureWorks2019-- Usar SUM para devolver datos de resumenSELECT * FROM Production.ProductWHERE Name LIKE 'Mountain%'SELECT p.Color, SUM(p.ListPrice) TotalPrice, SUM(p.StandardCost) TotalCostFROM Production.Product AS pWHERE p.Color IS NOT NULL 	AND p.ListPrice != 0.00	AND p.Name LIKE 'Mountain%'GROUP BY p.ColorORDER BY p.Color-- Usar la cláusula OVER-- Esto significa que la función SUM se calcula para cada territorio en función del -- año de ventasSELECT s.BusinessEntityID, s.TerritoryID,	DATEPART(YY,s.ModifiedDate) AS SaleYear, 	CONVERT(NVARCHAR(50),s.SalesYTD,1) AS SalesYTD,	CONVERT(NVARCHAR(50),AVG(s.SalesYTD) OVER(PARTITION BY TerritoryID											ORDER BY DATEPART(YY,s.ModifiedDate)											),1) AS MovingAVG,	CONVERT(NVARCHAR(50),SUM(s.SalesYTD) OVER (PARTITION BY TerritoryID											ORDER BY DATEPART(YY,s.ModifiedDate)											),1) AS AcumulativeTotalFROM Sales.SalesPerson AS sWHERE s.TerritoryID IS NOT NULL OR s.TerritoryID < 5ORDER BY s.TerritoryID, s.SalesLastYear-- Calcular totales de grupo con mas de una columnaSELECT COUNT(*) FROM Production.ProductCategorySELECT COUNT(*) FROM Production.ProductSubcategorySELECT pc.Name, COUNT(ps.ProductSubcategoryID) CategorySubTotalFROM Production.ProductCategory AS pcINNER JOIN Production.ProductSubcategory AS psON pc.ProductCategoryID = ps.ProductCategoryIDGROUP BY pc.Name